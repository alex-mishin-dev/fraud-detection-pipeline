services:
  postgres:
    image: postgres:13
    container_name: fraud_db
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 5s
      retries: 5

    # Это базовый набор переменных для ВСЕХ сервисов Airflow
  x-airflow-common: &airflow-common
    build:
      context: .
      dockerfile: Dockerfile
      args:
        # Эта переменная теперь берется из .env файла
        DOCKER_GID: ${DOCKER_GID}
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: "FBACrK2rq1gardY_6I9a4k2vJcptd_b64W2-4Ffn-aU="
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__WEBSERVER__SECRET_KEY: "super-secret-key-that-is-the-same-for-all-components"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./Makefile:/opt/airflow/Makefile
      # --- ВОТ ОН, НАШ ЗОЛОТОЙ КЛЮЧ ---
      - /var/run/docker.sock:/var/run/docker.sock

  airflow-init:
    <<: *airflow-common # Используем общий набор переменных
    container_name: airflow_init
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "airflow db init && airflow users create --username admin --password admin --firstname Anonymous --lastname User --role Admin --email admin@example.com"

  airflow-webserver:
    <<: *airflow-common # Используем общий набор переменных
    container_name: airflow_webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    ports:
      - "8088:8080"
    command: webserver

  airflow-scheduler:
    <<: *airflow-common # Используем общий набор переменных
    container_name: airflow_scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: scheduler

  # ... остальные сервисы без изменений ...
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  spark-master:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-master
    ports:
      - "8081:8080"
      - "7077:7077"
      - "8888:8888"
    volumes:
      - ./src:/home/jovyan/work/src

  spark-worker:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-worker
    depends_on:
      - spark-master
    command: /usr/local/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    volumes:
      - ./src:/home/jovyan/work/src

  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    ports:
      - "3000:3000"
    depends_on:
      - postgres

volumes:
  postgres_data:
